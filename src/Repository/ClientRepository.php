<?php

namespace App\Repository;

use App\Entity\ClientEntity;

/**
 * ClientRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ClientRepository extends \Doctrine\ORM\EntityRepository
{

    public function validate($client_form) {

        $errors = array();

        $action = $client_form['action'];

        // d = delete
        if($action !== 'd') {
            $clientExist = $this->getEntityManager()->getRepository(ClientEntity::class)
                ->createQueryBuilder('u')
                ->where('u.id != :id')
                ->andWhere('u.firstName = :firstName')
                ->andWhere('u.lastName = :lastName')
                ->andWhere('u.branch = :branch')
                ->andWhere('u.isDeleted != 1')
                ->setParameters(array(
                    'id' => $client_form['id'],
                    'firstName' => $client_form['first_name'],
                    'lastName' => $client_form['last_name'],
                    'branch' => base64_decode($client_form['branch'])


                ))
                ->getQuery()->getResult();

            if($clientExist) {
                $errors[] = 'Client already exist.';
            }

            if(empty($client_form['first_name'])) {
                $errors[] = 'First name should not be blank.';
            }

            if(empty($client_form['last_name'])) {
                $errors[] = 'Last name should not be blank.';
            }
            
        }

        return $errors;
    }

    public function ajax_list(array $get, $userData){

        $columns = array(
            array('c.`first_name`', "CONCAT(c.`first_name`, ' ', c.`last_name`)", 'fullName'),
            array('c.`address`', "c.`address`"),
            array('c.`contact_no`', "c.`contact_no`", " contactNo"),
            array('c.`email`', "c.`email`", " email"),
            array('c.`id`', "c.`id`")
        );
        $asColumns = array();

        $select = "SELECT";
        $from = "FROM `client` c";
        $sqlWhere = " WHERE c.`is_deleted` = 0";
        $joins = "";
        $groupBy = "";
        $orderBy = "";
        $limit = "";
        $stmtParams = array();

        foreach($columns as $key => $column) {
            $select .= ($key > 0 ? ', ' : ' ') . $column[1] . (isset($column[2]) ? ' AS ' . $column[2] : '');
        }


        if($userData['type'] != 'Super Admin' || $userData['branchId']){

            $sqlWhere .= " AND c.`branch_id` = :branchId";
            $stmtParams['branchId'] = base64_decode($userData['branchId']);
        }

        /*
         * Ordering
         */
        foreach($get['columns'] as $key => $column) {
            if($column['orderable']=='true') {
                if(isSet($get['order'])) {
                    foreach($get['order'] as $order) {
                        if($order['column']==$key) {
                            $orderBy .= (!empty($orderBy) ? ', ' : 'ORDER BY ') . $columns[$key][0] . (!empty($order['dir']) ? ' ' . $order['dir'] : '');
                        }
                    }
                }
            }
        }

        /*
         * Filtering
         */
        if(isset($get['search']) && $get['search']['value'] != ''){
            $aLikes = array();
            foreach($get['columns'] as $key => $column) {
                if($column['searchable']=='true') {
                    $aLikes[] = $columns[$key][0] . ' LIKE :searchValue';
                }
            }
            foreach($asColumns as $asColumn) {
                $aLikes[] = $asColumn . ' LIKE :searchValue';
            }
            if(count($aLikes)) {
                $sqlWhere .= (!empty($sqlWhere) ? ' AND ' : 'WHERE ') . '(' . implode(' OR ', $aLikes) . ')';
                $stmtParams['searchValue'] = "%" . $get['search']['value'] . "%";
            }
        }

        /* Set Limit and Length */
        if(isset( $get['start'] ) && $get['length'] != '-1'){
            $limit = 'LIMIT ' . (int)$get['start'] . ',' . (int)$get['length'];
        }

        $sql = "$select $from $joins $sqlWhere $groupBy $orderBy";
        $query = $this->getEntityManager()->getConnection()->prepare($sql);
     

        foreach($stmtParams as $k => $v){
            $query->bindValue($k, $v);

        }
        $res = $query->executeQuery();
        $result_count = $res->fetchAllAssociative();
        $sql = "$select $from $joins $sqlWhere $groupBy $orderBy $limit";
        $query = $this->getEntityManager()->getConnection()->prepare($sql);
        foreach($stmtParams as $k => $v){
            $query->bindValue($k, $v);

        }
        $res = $query->executeQuery();
        $result = $res->fetchAllAssociative();

        /* Data Count */
        $recordsTotal = count($result_count);

        /*
         * Output
         */
        $output = array(
            "draw" => intval($get['draw']),
            "recordsTotal" => $recordsTotal,
            "recordsFiltered" => $recordsTotal,
            "data" => array()
        );

        $url = $get['url'];
        $formUrl = '';
        $hasUpdate = false;
        $hasDetails = false;
        if($userData['type'] == 'Super Admin'  || in_array('Client Update', $userData['accesses'])){
            $hasUpdate = true;
        }

        if($userData['type'] == 'Super Admin'  || in_array('Client Details', $userData['accesses'])){

            $detailsUrl = $url . 'client/details';  
            $hasDetails = true;
        }


        foreach($result as $row) {

            $id = base64_encode($row['id']);

            $action = $hasUpdate ? "<a class='action-button-style btn btn-primary  href-modal' href='javascript:void(0)' data-id='".$id."' data-action='u'>Update</a>" : "";
            $details = $hasDetails ? "<a class='action-button-style ' href='$detailsUrl/$id'>". $row['fullName']."</a>" : $row['fullName'];

            $values = array(
                $details,
                $row['address'],
                $row['contactNo'],
                $row['email'],
                $action
            );

            $output['data'][] = $values;
        }

        unset($result);

        return $output;
    }

    public function autocompleteSuggestions($q, $userData) {

        $stmtParams = array(
            'q' => "%" . $q['query'] . "%"
        );
        $andWhere = '';

        if($userData['type'] != 'Super Admin'){

             $andWhere.= ' WHERE u.branch_id = :branchId'; 
             $stmtParams['branchId'] = $userData['branchId'];   
        }

        
        $query = $this->getEntityManager()->getConnection()->prepare("
            SELECT
                u.`id`,
                CONCAT(u.`first_name`, ' ', u.`last_name`) AS data,
                CONCAT(u.`first_name`, ' ', u.`last_name`) AS value
            FROM `client` u
            $andWhere
            AND u.`is_deleted` != 1
            AND CONCAT(u.`first_name`, ' ', u.`last_name`) LIKE :q
            ORDER BY u.`first_name`
            LIMIT 0,20
        ");

        foreach($stmtParams as $k => $v){
            $query->bindValue($k, $v);

        }
       
        $res = $query->executeQuery();
        $result = $res->fetchAllAssociative();
        return $result;
    }

    public function getCtr($get, array $userData){

        $result =[];

        $stmtParams =[];
        $andWhere = '';
        $admissionWhere = '';
        $invoiceWhere = '';

        if($userData['type'] != 'Super Admin'){

             $andWhere.= ' WHERE c.branch_id = :branchId'; 
             $stmtParams['branchId'] = $userData['branchId'];   
        }

        if(isset($get) && $get != ''){

            if($get == 'daily'){

                $admissionWhere.= ' WHERE a.`created_at` BETWEEN :startDate AND :endDate';
                $invoiceWhere.= ' WHERE i.`created_at` BETWEEN :startDate AND :endDate';
                $stmtParams['startDate'] =  date("Y-m-d 00:00:00");
                $stmtParams['endDate'] =  date("Y-m-d 23:59:59");
                

            } else {

                $admissionWhere.= ' WHERE a.`created_at` BETWEEN :startDate AND :endDate';
                $invoiceWhere.= ' WHERE i.`created_at` BETWEEN :startDate AND :endDate';
                
                $timestamp    = strtotime(date("F Y"));
                $stmtParams['startDate'] =  date('Y-m-01 00:00:00', $timestamp);
                $stmtParams['endDate'] = date('Y-m-t 12:59:59', $timestamp);
            }   
        }

        $query = $this->getEntityManager()->getConnection()->prepare("
            SELECT
              a.clientAdmissionCtr,
              i.clientInvoiceCtr,
              c.`id`
            FROM `client` c
            LEFT JOIN (
                SELECT 
                    a.`id`,
                    a.`client_id`,
                    COUNT(a.`id`) AS clientAdmissionCtr
                FROM `admission` a
                ".$admissionWhere."
                GROUP BY a.`client_id`
            ) a ON a.`client_id` = c.`id`
            LEFT JOIN(
                SELECT 
                    i.`id`,
                    i.`client_id`,
                    COUNT(i.`id`) AS clientInvoiceCtr
                FROM  `invoice` i
                ".$invoiceWhere."
                GROUP BY i.`client_id`
            ) i ON i.`client_id` = i.`id`
            $andWhere
            AND  (a.clientAdmissionCtr IS NOT NULL OR i.clientInvoiceCtr IS NOT NULL)
            GROUP BY c.`id`
        ");

        foreach($stmtParams as $k => $v){
            $query->bindValue($k, $v);

        }
       
        $res = $query->executeQuery();
        $result = $res->fetchAllAssociative();

        return $result ? count($result) : 0;
    }

    public function getMontlyAnalytics(array $userData){

        $result =[];

        $stmtParams =[];
        $andWhere = '';
        $admissionWhere = '';
        $invoiceWhere = '';

        if($userData['type'] != 'Super Admin'){

             $andWhere.= ' WHERE i.branch_id = :branchId'; 
             $stmtParams['branchId'] = $userData['branchId'];   
        }
       
        $firstDay  = date("Y-m-d", strtotime("first day of this month"));
        $lastDay = date("Y-m-d 23:59:59", strtotime("last day of this month"));
        $query = $this->getEntityManager()->getConnection()->prepare("
                with recursive cte as (
                    select '".$firstDay." 00:00:00' dt
                    union all 
                    select dt + interval 1 day from cte where dt < '".$lastDay."' - interval 1 day
                )
                select
                    row_number() over(order by cte.`dt`) id,
                    DATE_FORMAT(cte.`dt`, '%d') as dayMonth,
                    IFNULL(i.clientCtr, 0) as clientCtr
                from `cte` cte 
                LEFT JOIN(
                    SELECT 
                       COUNT(DISTINCT i.`client_id`) as clientCtr,
                       i.`created_at` as createdAt
                    FROM `invoice` i
                    ".$andWhere."
                    AND i.`status` = 0
                    GROUP BY DATE_FORMAT(i.`created_at`, '%d')
                ) i ON DATE_FORMAT(i.createdAt, '%d') = DATE_FORMAT(cte.`dt`, '%d')
        ");

       
        foreach($stmtParams as $k => $v){
            $query->bindValue($k, $v);

        }

        
       
        $res = $query->executeQuery();
        $result = $res->fetchAllAssociative();

        return $result;
    }

    public function list(array $userData){

        $stmtParams =[];
        $andWhere = '';

        if($userData['type'] != 'Super Admin'){

             $andWhere.= ' WHERE c.branch_id = :branchId'; 
             $stmtParams['branchId'] = base64_decode($userData['branchId']);   
        }

      
        $query = $this->getEntityManager()->getConnection()->prepare("
                select
                    CONCAT(c.`first_name`, ' ', c.`last_name` ) AS client,        
                    c.`contact_no` AS nos
                from `client` c 
                ".$andWhere."
            ");

       
        foreach($stmtParams as $k => $v){
            $query->bindValue($k, $v);

        }

        $res = $query->executeQuery();
        $result = $res->fetchAllAssociative();
        return $result;
    }

   
}
