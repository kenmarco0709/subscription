<?php

namespace App\Repository;

use App\Entity\ClientAccountEntity;

/**
 * ClientAccountRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ClientAccountRepository extends \Doctrine\ORM\EntityRepository
{

    public function validate($clientAccount_form) {

        $errors = array();

        $action = $clientAccount_form['action'];

        // d = delete
        if($action !== 'd') {

            $clientAccountExist = $this->getEntityManager()->getRepository(ClientAccountEntity::class)
                ->createQueryBuilder('cm')
                ->where('cm.id != :id')
                ->andWhere('cm.description = :description')
                ->andWhere('cm.isDeleted != 1')

                ->setParameters(array(
                    'description' => $clientAccount_form['description'],
                    'id' => $clientAccount_form['id']
                ))
                ->getQuery()->getResult();

            if($clientAccountExist) {
                $errors[] = 'Description  already exist.';
            }

            if(empty($clientAccount_form['description'])) {
                $errors[] = 'Description should not be blank.';
            }
            
        }

        return $errors;
    }

    public function ajax_list(array $get, $userData){

        $columns = array(
            array('cm.`description`', 'cm.`description`', 'description'),
            array('cm.`status`', 'cm.`status`', 'status'),
            array('cm.`id`', "cm.`id`")
        );
        $asColumns = array();

        $select = "SELECT";
        $from = "FROM `client_account` cm";
        $sqlWhere = " WHERE cm.`is_deleted` = 0";
        $joins = "";
        $groupBy = "";
        $orderBy = "";
        $limit = "";
        $stmtParams = array();

        foreach($columns as $key => $column) {
            $select .= ($key > 0 ? ', ' : ' ') . $column[1] . (isset($column[2]) ? ' AS ' . $column[2] : '');
        }


        if($userData['type'] != 'Super Admin' || $get['clientId']){

            $sqlWhere .= " AND cm.`client_id` = :clientId";
            $stmtParams['clientId'] = base64_decode($get['clientId']);
        }

        /*
         * Ordering
         */
        foreach($get['columns'] as $key => $column) {
            if($column['orderable']=='true') {
                if(isSet($get['order'])) {
                    foreach($get['order'] as $order) {
                        if($order['column']==$key) {
                            $orderBy .= (!empty($orderBy) ? ', ' : 'ORDER BY ') . $columns[$key][0] . (!empty($order['dir']) ? ' ' . $order['dir'] : '');
                        }
                    }
                }
            }
        }

        /*
         * Filtering
         */
        if(isset($get['search']) && $get['search']['value'] != ''){
            $aLikes = array();
            foreach($get['columns'] as $key => $column) {
                if($column['searchable']=='true') {
                    $aLikes[] = $columns[$key][0] . ' LIKE :searchValue';
                }
            }
            foreach($asColumns as $asColumn) {
                $aLikes[] = $asColumn . ' LIKE :searchValue';
            }
            if(count($aLikes)) {
                $sqlWhere .= (!empty($sqlWhere) ? ' AND ' : 'WHERE ') . '(' . implode(' OR ', $aLikes) . ')';
                $stmtParams['searchValue'] = "%" . $get['search']['value'] . "%";
            }
        }

        /* Set Limit and Length */
        if(isset( $get['start'] ) && $get['length'] != '-1'){
            $limit = 'LIMIT ' . (int)$get['start'] . ',' . (int)$get['length'];
        }

        $sql = "$select $from $joins $sqlWhere $groupBy $orderBy";
        $query = $this->getEntityManager()->getConnection()->prepare($sql);
     

        foreach($stmtParams as $k => $v){
            $query->bindValue($k, $v);

        }
        $res = $query->executeQuery();
        $result_count = $res->fetchAllAssociative();
        $sql = "$select $from $joins $sqlWhere $groupBy $orderBy $limit";
        $query = $this->getEntityManager()->getConnection()->prepare($sql);
        foreach($stmtParams as $k => $v){
            $query->bindValue($k, $v);

        }
        $res = $query->executeQuery();
        $result = $res->fetchAllAssociative();

        /* Data Count */
        $recordsTotal = count($result_count);

        /*
         * Output
         */
        $output = array(
            "draw" => intval($get['draw']),
            "recordsTotal" => $recordsTotal,
            "recordsFiltered" => $recordsTotal,
            "data" => array()
        );

        $url = $get['url'];
        $formUrl = '';
        $hasUpdate = false;
        $hasDetails = false;

        
        if($userData['type'] == 'Super Admin'  || in_array('Client Details Account Update', $userData['accesses'])){
            $hasUpdate = true;
        }

        if($userData['type'] == 'Super Admin'  || in_array('Client Details Account Details', $userData['accesses'])){
            $hasDetails = true;
            $detailsUrl = $url . 'client_account/details';  


        }


        foreach($result as $row) {

            $id = base64_encode($row['id']);

            $action = $hasUpdate ? "<a class='action-button-style btn btn-primary  href-modal' href='javascript:void(0)' data-id='".$id."' data-action='u'>Update</a>" : "";
            $details = $hasDetails ? "<a class='action-button-style ' href='$detailsUrl/$id'>". $row['description']."</a>" : $row['description'];

            $values = array(
                $details,
                $row['status'],
                $action
            );

            $output['data'][] = $values;
        }

        unset($result);

        return $output;
    }

    public function ajax_for_billing_list(array $get, $userData){

        $columns = array(
            array('c.`first_name`', "CONCAT(c.`first_name`, ' ', c.`last_name`)", 'fullName'),
            array('p.`description`', 'p.`description`', 'purok'),
            array('cm.`account_serial_no`', 'cm.`account_serial_no`', 'serialNo'),
            array('DATE_FORMAT(cmr.billingDate, "%m/%d/%Y")', 'DATE_FORMAT(cmr.billingDate, "%m/%d/%Y")', 'billingDate'),
            array('cm.`present_billing`', 'cm.`present_billing`', 'presentBilling'),
            array('cm.`id`', "cm.`id`")
        );
        $asColumns = array();

        $select = "SELECT";
        $from = "FROM `client_account` cm";
        $sqlWhere = " WHERE cm.`is_deleted` = 0";
        $sqlWhere .= " AND cm.`status` = 'Active' AND c.`is_deleted` = 0";
        $joins = " LEFT JOIN `purok` p ON p.`id` = cm.`purok_id`";
        $joins .= " LEFT JOIN `client` c ON c.`id` = cm.`client_id`";
        $joins .= " LEFT JOIN (
            SELECT 
                cmr.`status` AS status,
                cmr.`previous_billing` AS previousBilling,
                cmr.`present_billing` AS presentBilling,
                cmr.`consume` AS consume,
                cmr.`billing_date` AS billingDate,
                cmr.`due_date` AS dueDate,
                cmr.`billed_amount` AS billedAmt, 
                cmr.`id` AS cmrId,
                cmr.`client_account_id` AS clientAccountId
            FROM `client_account_billing` cmr
            WHERE cmr.`billing_date` IN (
                SELECT 
                    MAX(billing_date)
                FROM `client_account_billing` s
                WHERE s.`is_deleted` = 0
                AND s.`client_account_id` = cmr.`client_account_id`
                GROUP BY s.`client_account_id` 
            )
            AND cmr.`is_deleted` = 0
            GROUP BY cmr.`client_account_id`  
        ) cmr ON  cm.`id` = cmr.clientAccountId ";
        $groupBy = "";
        $orderBy = "";
        $limit = "";
        $stmtParams = array();

        foreach($columns as $key => $column) {
            $select .= ($key > 0 ? ', ' : ' ') . $column[1] . (isset($column[2]) ? ' AS ' . $column[2] : '');
        }


        if($userData['type'] != 'Super Admin' || $userData['branchId']){

            $sqlWhere .= " AND c.`branch_id` = :branchId";
            $stmtParams['branchId'] = base64_decode($userData['branchId']);
        }

        if($get['purok'] &&  $get['purok'] != 'All' ){

            $sqlWhere .= " AND p.`id` = :purokId";
            $stmtParams['purokId'] = base64_decode($get['purok']);
        }

        /*
         * Ordering
         */
        foreach($get['columns'] as $key => $column) {
            if($column['orderable']=='true') {
                if(isSet($get['order'])) {
                    foreach($get['order'] as $order) {
                        if($order['column']==$key) {
                            $orderBy .= (!empty($orderBy) ? ', ' : 'ORDER BY ') . $columns[$key][0] . (!empty($order['dir']) ? ' ' . $order['dir'] : '');
                        }
                    }
                }
            }
        }

        /*
         * Filtering
         */
        if(isset($get['search']) && $get['search']['value'] != ''){
            $aLikes = array();
            foreach($get['columns'] as $key => $column) {
                if($column['searchable']=='true') {
                    $aLikes[] = $columns[$key][0] . ' LIKE :searchValue';
                }
            }
            foreach($asColumns as $asColumn) {
                $aLikes[] = $asColumn . ' LIKE :searchValue';
            }
            if(count($aLikes)) {
                $sqlWhere .= (!empty($sqlWhere) ? ' AND ' : 'WHERE ') . '(' . implode(' OR ', $aLikes) . ')';
                $stmtParams['searchValue'] = "%" . $get['search']['value'] . "%";
            }
        }

        /* Set Limit and Length */
        if(isset( $get['start'] ) && $get['length'] != '-1'){
            $limit = 'LIMIT ' . (int)$get['start'] . ',' . (int)$get['length'];
        }

        $sql = "$select $from $joins $sqlWhere $groupBy $orderBy";
        $query = $this->getEntityManager()->getConnection()->prepare($sql);
     

        foreach($stmtParams as $k => $v){
            $query->bindValue($k, $v);

        }
        $res = $query->executeQuery();
        $result_count = $res->fetchAllAssociative();
        $sql = "$select $from $joins $sqlWhere $groupBy $orderBy $limit";

        $query = $this->getEntityManager()->getConnection()->prepare($sql);
        foreach($stmtParams as $k => $v){
            $query->bindValue($k, $v);

        }
        $res = $query->executeQuery();
        $result = $res->fetchAllAssociative();

        /* Data Count */
        $recordsTotal = count($result_count);

        /*
         * Output
         */
        $output = array(
            "draw" => intval($get['draw']),
            "recordsTotal" => $recordsTotal,
            "recordsFiltered" => $recordsTotal,
            "data" => array()
        );

        $url = $get['url'];
        $formUrl = '';
        $hasBillingNew = false;

        
        if($userData['type'] == 'Super Admin'  || in_array('Dashboard Billing New', $userData['accesses'])){
            $hasBillingNew = true;
        }


        foreach($result as $row) {

            $id = base64_encode($row['id']);

            $action = $hasBillingNew ? "<a class='action-button-style btn btn-primary  href-modal' href='javascript:void(0)' data-id='0' data-accountId='".$id."' data-action='n'>Billing</a>" : "";

            $values = array(
                $row['fullName'],
                $row['purok'],
                $row['serialNo'],
                $row['billingDate'],
                $row['presentBilling'],
                $action
            );

            $output['data'][] = $values;
        }

        unset($result);

        return $output;
    }

    public function ajax_pending_payment_list(array $get, $userData){

        $columns = array(
            array('c.`first_name`', "CONCAT(c.`first_name`, ' ', c.`last_name`)", 'fullName'),
            array('cm.`description`', 'cm.`description`', 'serialNo'),
            array('DATE_FORMAT(cmr.billingDate, "%m/%d/%Y")', 'DATE_FORMAT(cmr.billingDate, "%m/%d/%Y")', 'billingDate'),
            array('cm.`remaining_balance`', 'cm.`remaining_balance`', 'remainingBalance'),
            array('cmr.billedAmt', 'cmr.billedAmt', 'billedAmount'),
            array('cm.`remarks`', 'cm.`remarks`', 'remarks'),
            array('cm.`id`', "cm.`id`")
        );
        $asColumns = array();

        $select = "SELECT ";
        $from = "FROM `client_account` cm";
        $sqlWhere = " WHERE cm.`is_deleted` = 0";
        $sqlWhere .= " AND cm.`status` = 'Active' AND cmr.cmrId IS NOT NULL AND c.`is_deleted`=0";
        $joins = " LEFT JOIN `client` c ON c.`id` = cm.`client_id`";
        $joins .= " LEFT JOIN (
            SELECT 
                cmr.`status` AS status,
                cmr.`billing_date` AS billingDate,
                cmr.`due_date` AS dueDate,
                cmr.`billed_amount` AS billedAmt, 
                cmr.`id` AS cmrId,
                cmr.`client_account_id` AS clientAccountId
            FROM `client_account_billing` cmr
            WHERE cmr.`status` = 'Pending Payment'
            AND cmr.`billing_date` IN (
                SELECT 
                    MAX(s.`billing_date`)
                FROM `client_account_billing` s
                WHERE s.`status` = 'Pending Payment'
                AND s.`is_deleted` = 0
                AND s.`client_account_id` = cmr.`client_account_id`
                GROUP BY s.`client_account_id` 
            )
            AND cmr.`is_deleted` = 0
            GROUP BY cmr.`client_account_id`  
        ) cmr ON  cm.`id` = cmr.clientAccountId ";
         
        

        $groupBy = " ";
        $orderBy = "";
        $limit = "";
        $stmtParams = array();

        foreach($columns as $key => $column) {
            $select .= ($key > 0 ? ', ' : ' ') . $column[1] . (isset($column[2]) ? ' AS ' . $column[2] : '');
        }


        if($userData['type'] != 'Super Admin' || $userData['branchId']){

            $sqlWhere .= " AND c.`branch_id` = :branchId";
            $stmtParams['branchId'] = base64_decode($userData['branchId']);
        }

        /*
         * Ordering
         */
        foreach($get['columns'] as $key => $column) {
            if($column['orderable']=='true') {
                if(isSet($get['order'])) {
                    foreach($get['order'] as $order) {
                        if($order['column']==$key) {
                            $orderBy .= (!empty($orderBy) ? ', ' : 'ORDER BY ') . $columns[$key][0] . (!empty($order['dir']) ? ' ' . $order['dir'] : '');
                        }
                    }
                }
            }
        }

        /*
         * Filtering
         */
        if(isset($get['search']) && $get['search']['value'] != ''){
            $aLikes = array();
            foreach($get['columns'] as $key => $column) {
                if($column['searchable']=='true') {
                    $aLikes[] = $columns[$key][0] . ' LIKE :searchValue';
                }
            }
            foreach($asColumns as $asColumn) {
                $aLikes[] = $asColumn . ' LIKE :searchValue';
            }
            if(count($aLikes)) {
                $sqlWhere .= (!empty($sqlWhere) ? ' AND ' : 'WHERE ') . '(' . implode(' OR ', $aLikes) . ')';
                $stmtParams['searchValue'] = "%" . $get['search']['value'] . "%";
            }
        }

        /* Set Limit and Length */
        if(isset( $get['start'] ) && $get['length'] != '-1'){
            $limit = 'LIMIT ' . (int)$get['start'] . ',' . (int)$get['length'];
        }

        $sql = "$select $from $joins $sqlWhere $groupBy $orderBy";
        $query = $this->getEntityManager()->getConnection()->prepare($sql);
     

        foreach($stmtParams as $k => $v){
            $query->bindValue($k, $v);

        }
        $res = $query->executeQuery();
        $result_count = $res->fetchAllAssociative();
        $sql = "$select $from $joins $sqlWhere $groupBy $orderBy $limit";


        $query = $this->getEntityManager()->getConnection()->prepare($sql);
        foreach($stmtParams as $k => $v){
            $query->bindValue($k, $v);

        }
        $res = $query->executeQuery();
        $result = $res->fetchAllAssociative();

        /* Data Count */
        $recordsTotal = count($result_count);

        /*
         * Output
         */
        $output = array(
            "draw" => intval($get['draw']),
            "recordsTotal" => $recordsTotal,
            "recordsFiltered" => $recordsTotal,
            "data" => array()
        );

        $url = $get['url'];
        $formUrl = '';
        $hasPaymentNew = false;

        
        if($userData['type'] == 'Super Admin'  || in_array('Dashboard Payment New', $userData['accesses'])){
            $hasPaymentNew = true;
        }

        foreach($result as $row) {

            $id = base64_encode($row['id']);

            $action = $hasPaymentNew ? "<a class='action-button-style btn btn-primary  href-modal' href='javascript:void(0)' data-id='0' data-accountId='".$id."' data-action='n'>Payment</a>" : "";

            $values = array(
                $row['fullName'],
                $row['serialNo'],
                $row['billingDate'],
                $row['remainingBalance'],
                $row['billedAmount'],
                $row['remarks'],
                $action
            );

            $output['data'][] = $values;
        }

        unset($result);

        return $output;
    }

    public function autocompleteSuggestions($q, $userData) {

        $stmtParams = array(
            'q' => "%" . $q['query'] . "%"
        );
        $andWhere = '';

        if($userData['type'] != 'Super Admin'){

             $andWhere.= ' WHERE u.branch_id = :branchId'; 
             $stmtParams['branchId'] = $userData['branchId'];   
        }

        
        $query = $this->getEntityManager()->getConnection()->prepare("
            SELECT
                u.`id`,
                CONCAT(u.`first_name`, ' ', u.`last_name`) AS data,
                CONCAT(u.`first_name`, ' ', u.`last_name`) AS value
            FROM `client` u
            $andWhere
            AND u.`is_deleted` != 1
            AND CONCAT(u.`first_name`, ' ', u.`last_name`) LIKE :q
            ORDER BY u.`first_name`
            LIMIT 0,20
        ");

        foreach($stmtParams as $k => $v){
            $query->bindValue($k, $v);

        }
       
        $res = $query->executeQuery();
        $result = $res->fetchAllAssociative();
        return $result;
    }

    public function account_with_pending_payment($userData, $purok){
       
        $stmtParams = array();
        $andWhere = '';

        if($userData['type'] != 'Super Admin'){
             $stmtParams['branchId'] = base64_decode($userData['branchId']);   
        }

        if($purok && $purok !=  'All'){
            $andWhere .= ' AND p.id = :purokId';
            $stmtParams['purokId'] = base64_decode($purok);  
       }

        
        $query = $this->getEntityManager()->getConnection()->prepare("
                SELECT 
                    CONCAT(c.`first_name`, ' ', c.`last_name`) AS fullName,
                    cm.`account_serial_no` AS serialNo,
                    cmr.previousBilling AS previousBilling,
                    cmr.presentBilling AS presentBilling,
                    cmr.consume AS consume, 
                    DATE_FORMAT(cmr.billingDate, '%m/%d/%Y') AS billingDate,
                    DATE_FORMAT(cmr.dueDate, '%m/%d/%Y') AS dueDate,
                    cm.`remaining_balance` AS remainingBalance,
                    cmr.billedAmt AS billedAmount,
                    cmr.amountPerCubic AS amountPerCubic,
                    cm.`id`,
                    co.`description` AS company,
                    co.`address` AS companyAddress,
                    p.`description` AS purok,
                    DATE_FORMAT(cmc.firstPendingPayment, '%m/%d/%Y') AS firstPendingPayment  
                FROM `client_account` cm 
                LEFT JOIN `client` c ON c.`id` = cm.`client_id` 
                LEFT JOIN `purok` p ON p.`id` = cm.`purok_id` 
                LEFT JOIN `branch` b ON b.`id` = c.`branch_id`
                LEFT JOIN `company` co ON co.`id` = b.`company_id` 
                LEFT JOIN ( 
                    SELECT 
                        cmr.`status` AS status,
                        cmr.`previous_billing` AS previousBilling,
                        cmr.`present_billing` AS presentBilling,
                        cmr.`consume` AS consume,
                        cmr.`billing_date` AS billingDate,
                        cmr.`due_date` AS dueDate,
                        cmr.`billed_amount` AS billedAmt,
                        cmr.`amount_per_cubic` AS amountPerCubic,
                        cmr.`id` AS cmrId, cmr.`client_account_id` AS clientAccountId 
                    FROM `client_account_billing` cmr 
                    WHERE cmr.`status` = 'Pending Payment' 
                    AND cmr.`billing_date` IN ( 
                        SELECT 
                            MAX(billing_date) 
                            FROM `client_account_billing` s 
                        WHERE s.`status` = 'Pending Payment' 
                        AND s.`is_deleted` = 0 
                        GROUP BY s.`client_account_id` ) 
                    AND cmr.`is_deleted` = 0 
                    GROUP BY cmr.`client_account_id` ) cmr ON cm.`id` = cmr.clientAccountId 
                LEFT JOIN ( 
                    SELECT 
                        cmc.`due_date` AS firstPendingPayment,
                        cmc.`client_account_id` AS cclientAccountId 
                    FROM `client_account_billing` cmc 
                    WHERE cmc.`status` = 'Pending Payment' 
                    AND cmc.`billing_date` IN ( 
                        SELECT 
                            MIN(billing_date) 
                            FROM `client_account_billing` s 
                        WHERE s.`status` = 'Pending Payment' 
                        AND s.`is_deleted` = 0 
                        GROUP BY s.`client_account_id` ) 
                    AND cmc.`is_deleted` = 0 
                    GROUP BY cmc.`client_account_id` ) cmc ON cm.`id` = cmc.cclientAccountId   
                WHERE cm.`is_deleted` = 0 
                AND cm.`status` = 'Active' 
                AND cmr.cmrId IS NOT NULL 
                AND c.`branch_id` = :branchId 
                AND c.`is_deleted` = 0
                ".$andWhere."
                ORDER BY cm.`purok_id` asc
        ");

        foreach($stmtParams as $k => $v){
            $query->bindValue($k, $v);

        }
       
        $res = $query->executeQuery();
        $result = $res->fetchAllAssociative();
        return $result;

    }

    
    public function master_list($purok, $userData){
       
        $stmtParams = array();
        $andWhere = '';

        if($userData['type'] != 'Super Admin'){
             $stmtParams['branchId'] = base64_decode($userData['branchId']);   
        }

        if($purok && $purok !=  'All'){
            $andWhere .= ' AND p.id = :purokId';
            $stmtParams['purokId'] = base64_decode($purok);   
       }

        
        $query = $this->getEntityManager()->getConnection()->prepare('
            SELECT 
                CONCAT(c.`first_name`, " ", c.`last_name`) AS fullName,
                p.`description` AS purok,
                cm.`account_serial_no` AS serialNo,
                DATE_FORMAT(cmr.billingDate, "%m/%d/%Y") AS billingDate,
                cm.`present_billing` AS presentBilling, 
                cm.`id` 
            FROM `client_account` cm 
            LEFT JOIN `purok` p ON p.`id` = cm.`purok_id` 
            LEFT JOIN `client` c ON c.`id` = cm.`client_id` 
            LEFT JOIN ( 
                SELECT
                     cmr.`status` AS status,
                     cmr.`previous_billing` AS previousBilling, 
                     cmr.`present_billing` AS presentBilling, 
                     cmr.`consume` AS consume, 
                     cmr.`billing_date` AS billingDate, 
                     cmr.`due_date` AS dueDate, 
                     cmr.`billed_amount` AS billedAmt, 
                     cmr.`id` AS cmrId, 
                     cmr.`client_account_id` AS clientAccountId 
                FROM `client_account_billing` cmr 
                WHERE cmr.`billing_date` IN 
                    ( 
                        SELECT 
                            MAX(billing_date) 
                        FROM `client_account_billing` s 
                        WHERE s.`is_deleted` = 0 
                        GROUP BY s.`client_account_id` 
                    ) 
                AND cmr.`is_deleted` = 0 
                GROUP BY cmr.`client_account_id` 
            ) cmr ON cm.`id` = cmr.clientAccountId 
            WHERE cm.`is_deleted` = 0 
            AND cm.`status` = "Active" 
            AND c.`is_deleted` = 0 
            AND c.`branch_id` = :branchId 
            '.$andWhere.'
            ORDER BY p.`description` asc
        ');

        foreach($stmtParams as $k => $v){
            $query->bindValue($k, $v);

        }
       
        $res = $query->executeQuery();
        $result = $res->fetchAllAssociative();
        return $result;

    }

   
}
